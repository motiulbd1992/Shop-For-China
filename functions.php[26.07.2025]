<?php
/**
 * Enqueue script and styles for child theme
 */
function woodmart_child_enqueue_styles() {
	wp_enqueue_style( 'child-style', get_stylesheet_directory_uri() . '/style.css', array( 'woodmart-style' ), woodmart_get_theme_info( 'Version' ) );
}
add_action( 'wp_enqueue_scripts', 'woodmart_child_enqueue_styles', 10010 );

if ( file_exists( dirname( __FILE__ ) . '/cmb2/init.php' ) ) {
    require_once dirname( __FILE__ ) . '/cmb2/init.php';
} elseif ( file_exists( dirname( __FILE__ ) . '/CMB2/init.php' ) ) {
    require_once dirname( __FILE__ ) . '/CMB2/init.php';
}

add_action( 'cmb2_admin_init', 'shopforchina_register_metabox' );
function shopforchina_register_metabox() {
    $prefix = 'cmb2_';

  $cmb2 = new_cmb2_box( array(
    'id'            => $prefix . 'metabox',
    'title'         => esc_html__( 'Product Specification', 'cmb2' ),
    'object_types'  => array( 'product' ), // Post type
  ) );  
  $cmb2->add_field( array(
    'name'       => esc_html__( 'Expaired Shipping Date', 'cmb2' ),
    'id'         => $prefix . 'expaired_shipping_date',
    'type'       => 'text_date',
  ) );
}


add_filter( 'woocommerce_is_purchasable', 'hide_add_to_cart_based_on_expiry_date', 10, 2 );
function hide_add_to_cart_based_on_expiry_date( $purchasable, $product ) {
    $product_id = $product->get_id();
    $current_date = date( 'Y-m-d' );
    $expiry_date_raw = get_post_meta( $product_id, 'cmb2_expaired_shipping_date', true );

    if ( $expiry_date_raw ) {
        $expiry_date_obj = DateTime::createFromFormat( 'm/d/Y', $expiry_date_raw );
        if ( $expiry_date_obj ) {
            $expiry_date = $expiry_date_obj->format( 'Y-m-d' );
            if ( $expiry_date <= $current_date ) {
                return false;
            }
        }
    }

    return $purchasable;
}

add_filter('woocommerce_checkout_fields', 'custom_billing_fields', 1000, 1);
function custom_billing_fields( $fields ) {
	unset($fields['billing']['billing_city']);
	unset($fields['billing']['billing_postcode']);
	unset($fields['shipping']['shipping_postcode']);
	unset($fields['shipping']['shipping_city']);
    return $fields;
}

add_action( 'wp_footer', 'shopfromchina_custom_script' );
function shopfromchina_custom_script() {
    if ( is_checkout() && ! is_user_logged_in() ) : ?>
        <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            var checkbox = document.querySelector('#createaccount');
            if (checkbox) {
                checkbox.checked = true;
                checkbox.setAttribute('checked', 'checked');
                checkbox.setAttribute('disabled', 'disabled');
                let hidden = document.createElement('input');
                hidden.type = 'hidden';
                hidden.name = 'createaccount';
                hidden.value = '1';
                checkbox.closest('form').appendChild(hidden);
            }
        });
        </script>
    <?php endif;
}



/*add_action('woocommerce_order_details_after_customer_details', 'add_editable_shipping_form_in_view_order');
function add_editable_shipping_form_in_view_order($order) {
    if (get_current_user_id() !== $order->get_customer_id()) {
        return;
    }

    if (! in_array($order->get_status(), ['on-hold', 'pending', 'processing'])) {
        return;
    }

    $current_date = date('Y-m-d');
    foreach ($order->get_items() as $item) {
        $product = $item->get_product();
        if (! $product) continue;

        $product_id = $product->get_id();
        $expiry_date_raw = get_post_meta($product_id, 'cmb2_expaired_shipping_date', true);

        if ($expiry_date_raw) {
            $expiry_date_obj = DateTime::createFromFormat('m/d/Y', $expiry_date_raw);
            if ($expiry_date_obj) {
                $expiry_date = $expiry_date_obj->format('Y-m-d');
                if ($expiry_date <= $current_date) {
                    return;
                }
            }
        }
    }

    $bd_states = [
        'BD-01' => 'Bandarban', 'BD-02' => 'Barguna', 'BD-03' => 'Bogura',
        'BD-04' => 'Brahmanbaria', 'BD-05' => 'Bagerhat', 'BD-06' => 'Barishal',
        'BD-07' => 'Bhola', 'BD-08' => 'Cumilla', 'BD-09' => 'Chandpur',
        'BD-10' => 'Chattogram', 'BD-11' => "Cox's Bazar", 'BD-12' => 'Chuadanga',
        'BD-13' => 'Dhaka', 'BD-14' => 'Dinajpur', 'BD-15' => 'Faridpur',
        'BD-16' => 'Feni', 'BD-17' => 'Gopalganj', 'BD-18' => 'Gazipur',
        'BD-19' => 'Gaibandha', 'BD-20' => 'Habiganj', 'BD-21' => 'Jamalpur',
        'BD-22' => 'Jashore', 'BD-23' => 'Jhenaidah', 'BD-24' => 'Joypurhat',
        'BD-25' => 'Jhalokati', 'BD-26' => 'Kishoreganj', 'BD-27' => 'Khulna',
        'BD-28' => 'Kurigram', 'BD-29' => 'Khagrachhari', 'BD-30' => 'Kushtia',
        'BD-31' => 'Lakshmipur', 'BD-32' => 'Lalmonirhat', 'BD-33' => 'Manikganj',
        'BD-34' => 'Mymensingh', 'BD-35' => 'Munshiganj', 'BD-36' => 'Madaripur',
        'BD-37' => 'Magura', 'BD-38' => 'Moulvibazar', 'BD-39' => 'Meherpur',
        'BD-40' => 'Narayanganj', 'BD-41' => 'Netrakona', 'BD-42' => 'Narsingdi',
        'BD-43' => 'Narail', 'BD-44' => 'Natore', 'BD-45' => 'Nawabganj',
        'BD-46' => 'Nilphamari', 'BD-47' => 'Noakhali', 'BD-48' => 'Naogaon',
        'BD-49' => 'Pabna', 'BD-50' => 'Pirojpur', 'BD-51' => 'Patuakhali',
        'BD-52' => 'Panchagarh', 'BD-53' => 'Rajbari', 'BD-54' => 'Rajshahi',
        'BD-55' => 'Rangpur', 'BD-56' => 'Rangamati', 'BD-57' => 'Sherpur',
        'BD-58' => 'Satkhira', 'BD-59' => 'Sirajganj', 'BD-60' => 'Sylhet',
        'BD-61' => 'Sunamganj', 'BD-62' => 'Shariatpur', 'BD-63' => 'Tangail',
        'BD-64' => 'Thakurgaon',
    ];
    $order_id = $order->get_id();
    $shipping = $order->get_address('shipping');

    echo '<div style="margin-top:20px;"><hr>';
    echo '<h3>Edit Shipping Address</h3>';
    echo '<form method="post">';

    echo '<p><label>Name<br><input type="text" name="shipping_name" value="' . esc_attr($shipping['first_name'] . ' ' . $shipping['last_name']) . '" /></label></p>';
    echo '<p><label>Street address<br><input type="text" name="shipping_address_1" value="' . esc_attr($shipping['address_1']) . '" /></label></p>';
echo '<p><label>Shipping Phone<br><input type="text" name="shipping_phone" value="' . esc_attr($order->get_meta('_shipping_phone')) . '" /></label></p>';


    echo '<p class="form-row form-row-wide address-field validate-required validate-state">';
    echo '<label for="shipping_state" class="required_field">District <span class="required">*</span></label>';
    echo '<span class="woocommerce-input-wrapper"><select name="shipping_state" id="shipping_state" class="state_select" required>';
    echo '<option value="">Select an optionâ€¦</option>';
    foreach ($bd_states as $code => $label) {
        $selected = ($shipping['state'] === $code) ? 'selected' : '';
        echo "<option value=\"$code\" $selected>$label</option>";
    }
    echo '</select></span></p>';

    wp_nonce_field('save_shipping_' . $order_id, 'save_shipping_nonce');
    echo '<input type="hidden" name="custom_order_id" value="' . esc_attr($order_id) . '">';
    echo '<button type="submit" name="save_shipping_address">Save Shipping Address</button>';
    echo '</form></div>';
}


add_action('template_redirect', 'handle_shipping_address_update_from_account');
function handle_shipping_address_update_from_account() {
    if (
        isset($_POST['save_shipping_address'], $_POST['custom_order_id'], $_POST['save_shipping_nonce']) &&
        wp_verify_nonce($_POST['save_shipping_nonce'], 'save_shipping_' . intval($_POST['custom_order_id']))
    ) {
        $order_id = intval($_POST['custom_order_id']);
        $order = wc_get_order($order_id);

        if (get_current_user_id() !== $order->get_customer_id()) {
            return;
        }

        $full_name = sanitize_text_field($_POST['shipping_name']);
        $name_parts = explode(' ', $full_name, 2);
        $first_name = $name_parts[0];
        $last_name = isset($name_parts[1]) ? $name_parts[1] : '';

        $order->set_shipping_first_name($first_name);
        $order->set_shipping_last_name($last_name);
        $order->set_shipping_address_1(sanitize_text_field($_POST['shipping_address_1']));
        $order->set_shipping_state(sanitize_text_field($_POST['shipping_state']));
		if (!empty($_POST['shipping_phone'])) {
			$order->update_meta_data('_shipping_phone', sanitize_text_field($_POST['shipping_phone']));
		}
        $order->save();

        wc_add_notice('Shipping address updated successfully.', 'success');
        wp_safe_redirect(wc_get_endpoint_url('view-order', $order_id, wc_get_page_permalink('myaccount')));
        exit;
    }
}*/


add_action('woocommerce_order_details_after_customer_details', 'add_editable_billing_form_in_view_order');
function add_editable_billing_form_in_view_order($order) {
    if (get_current_user_id() !== $order->get_customer_id()) {
        return;
    }

    if (! in_array($order->get_status(), ['on-hold', 'pending', 'processing'])) {
        return;
    }

    $current_date = date('Y-m-d');
    foreach ($order->get_items() as $item) {
        $product = $item->get_product();
        if (! $product) continue;

        $product_id = $product->get_id();
        $expiry_date_raw = get_post_meta($product_id, 'cmb2_expaired_billing_date', true);

        if ($expiry_date_raw) {
            $expiry_date_obj = DateTime::createFromFormat('m/d/Y', $expiry_date_raw);
            if ($expiry_date_obj) {
                $expiry_date = $expiry_date_obj->format('Y-m-d');
                if ($expiry_date <= $current_date) {
                    return;
                }
            }
        }
    }

    $bd_states = [
        'BD-01' => 'Bandarban', 'BD-02' => 'Barguna', 'BD-03' => 'Bogura',
        'BD-04' => 'Brahmanbaria', 'BD-05' => 'Bagerhat', 'BD-06' => 'Barishal',
        'BD-07' => 'Bhola', 'BD-08' => 'Cumilla', 'BD-09' => 'Chandpur',
        'BD-10' => 'Chattogram', 'BD-11' => "Cox's Bazar", 'BD-12' => 'Chuadanga',
        'BD-13' => 'Dhaka', 'BD-14' => 'Dinajpur', 'BD-15' => 'Faridpur',
        'BD-16' => 'Feni', 'BD-17' => 'Gopalganj', 'BD-18' => 'Gazipur',
        'BD-19' => 'Gaibandha', 'BD-20' => 'Habiganj', 'BD-21' => 'Jamalpur',
        'BD-22' => 'Jashore', 'BD-23' => 'Jhenaidah', 'BD-24' => 'Joypurhat',
        'BD-25' => 'Jhalokati', 'BD-26' => 'Kishoreganj', 'BD-27' => 'Khulna',
        'BD-28' => 'Kurigram', 'BD-29' => 'Khagrachhari', 'BD-30' => 'Kushtia',
        'BD-31' => 'Lakshmipur', 'BD-32' => 'Lalmonirhat', 'BD-33' => 'Manikganj',
        'BD-34' => 'Mymensingh', 'BD-35' => 'Munshiganj', 'BD-36' => 'Madaripur',
        'BD-37' => 'Magura', 'BD-38' => 'Moulvibazar', 'BD-39' => 'Meherpur',
        'BD-40' => 'Narayanganj', 'BD-41' => 'Netrakona', 'BD-42' => 'Narsingdi',
        'BD-43' => 'Narail', 'BD-44' => 'Natore', 'BD-45' => 'Nawabganj',
        'BD-46' => 'Nilphamari', 'BD-47' => 'Noakhali', 'BD-48' => 'Naogaon',
        'BD-49' => 'Pabna', 'BD-50' => 'Pirojpur', 'BD-51' => 'Patuakhali',
        'BD-52' => 'Panchagarh', 'BD-53' => 'Rajbari', 'BD-54' => 'Rajshahi',
        'BD-55' => 'Rangpur', 'BD-56' => 'Rangamati', 'BD-57' => 'Sherpur',
        'BD-58' => 'Satkhira', 'BD-59' => 'Sirajganj', 'BD-60' => 'Sylhet',
        'BD-61' => 'Sunamganj', 'BD-62' => 'Shariatpur', 'BD-63' => 'Tangail',
        'BD-64' => 'Thakurgaon',
    ];
    $order_id = $order->get_id();
    $billing = $order->get_address('billing');

    echo '<div style="margin-top:20px;"><hr>';
    echo '<h3>Edit billing Address</h3>';
    echo '<form method="post">';

    echo '<p><label>Name<br><input type="text" name="billing_name" value="' . esc_attr($billing['first_name'] . ' ' . $billing['last_name']) . '" /></label></p>';
    echo '<p><label>Street address<br><input type="text" name="billing_address_1" value="' . esc_attr($billing['address_1']) . '" /></label></p>';
echo '<p><label>Phone Number<br><input type="text" name="billing_phone" value="' . esc_attr($order->get_meta('_billing_phone')) . '" /></label></p>';


    echo '<p class="form-row form-row-wide address-field validate-required validate-state">';
    echo '<label for="billing_state" class="required_field">District <span class="required">*</span></label>';
    echo '<span class="woocommerce-input-wrapper"><select name="billing_state" id="billing_state" class="state_select" required>';
    echo '<option value="">Select an optionâ€¦</option>';
    foreach ($bd_states as $code => $label) {
        $selected = ($billing['state'] === $code) ? 'selected' : '';
        echo "<option value=\"$code\" $selected>$label</option>";
    }
    echo '</select></span></p>';

    wp_nonce_field('save_billing_' . $order_id, 'save_billing_nonce');
    echo '<input type="hidden" name="custom_order_id" value="' . esc_attr($order_id) . '">';
    echo '<button type="submit" name="save_billing_address">Save billing Address</button>';
    echo '</form></div>';
}


add_action('template_redirect', 'handle_billing_address_update_from_account');
function handle_billing_address_update_from_account() {
    if (
        isset($_POST['save_billing_address'], $_POST['custom_order_id'], $_POST['save_billing_nonce']) &&
        wp_verify_nonce($_POST['save_billing_nonce'], 'save_billing_' . intval($_POST['custom_order_id']))
    ) {
        $order_id = intval($_POST['custom_order_id']);
        $order = wc_get_order($order_id);

        if (get_current_user_id() !== $order->get_customer_id()) {
            return;
        }

        $full_name = sanitize_text_field($_POST['billing_name']);
        $name_parts = explode(' ', $full_name, 2);
        $first_name = $name_parts[0];
        $last_name = isset($name_parts[1]) ? $name_parts[1] : '';

        $order->set_billing_first_name($first_name);
        $order->set_billing_last_name($last_name);
        $order->set_billing_address_1(sanitize_text_field($_POST['billing_address_1']));
        $order->set_billing_state(sanitize_text_field($_POST['billing_state']));
		if (!empty($_POST['billing_phone'])) {
			$order->update_meta_data('_billing_phone', sanitize_text_field($_POST['billing_phone']));
		}
        $order->save();

        wc_add_notice('billing address updated successfully.', 'success');
        wp_safe_redirect(wc_get_endpoint_url('view-order', $order_id, wc_get_page_permalink('myaccount')));
        exit;
    }
}

add_filter('woocommerce_checkout_fields', 'add_shipping_phone_field_custom');
function add_shipping_phone_field_custom($fields) {
    $fields['shipping']['shipping_phone'] = array(
        'label'     => __('Shipping Phone'),
        'required'  => false,
        'class'     => array('form-row-wide'),
        'priority'  => 120,
    );
    return $fields;
}

add_action('woocommerce_checkout_create_order', 'copy_billing_phone_to_shipping_phone', 10, 2);
function copy_billing_phone_to_shipping_phone($order, $data) {
    if (empty($data['ship_to_different_address']) || $data['ship_to_different_address'] == false) {
        $billing_phone = $order->get_billing_phone();
        if ($billing_phone) {
            $order->update_meta_data('_shipping_phone', $billing_phone);
        }
    } elseif (!empty($data['shipping_phone'])) {
        $order->update_meta_data('_shipping_phone', sanitize_text_field($data['shipping_phone']));
    }
}

/*// 3. Show shipping phone in admin panel
add_action('woocommerce_admin_order_data_after_shipping_address', 'show_shipping_phone_admin', 10, 1);
function show_shipping_phone_admin($order) {
    $shipping_phone = $order->get_meta('_shipping_phone');
    if ($shipping_phone) {
        echo '<p><strong>' . __('Shipping Phone') . ':</strong> ' . esc_html($shipping_phone) . '</p>';
    }
}*/









